{"version":3,"sources":["images/github.png","utils/getWeb3.js","components/Nav.js","components/Hero.js","components/Hodler.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","Nav","react_default","createElement","className","href","src","github","alt","Hero","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","amount","time","handleAmountChange","bind","assertThisInitialized","handleTimeChange","handleSubmit","e","setState","target","value","_this2","preventDefault","contract","methods","deposit","utils","toWei","send","from","account","setMessage","on","getUser","setTimeout","clearMessage","onSubmit","type","name","placeholder","onChange","Component","Hodler","date","componentDidMount","interval","setInterval","getTime","handleWithdrawal","withdraw","clearInterval","user","earliest","Math","floor","Date","now","formatTime","days","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getSeconds","onClick","fromWei","renderTime","renderButton","Message","message","App","_callee2","accounts","networkId","deployedNetwork","instance","_context2","sent","eth","getAccounts","net","getId","HodlContract","networks","Contract","abi","address","alert","error","accountInterval","err","hodler","newMessage","components_Nav","components_Hodler","assign","components_Message","components_Hero","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sdCqCzBC,EAnCC,kBACd,IAAIC,QAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxBC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAgC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAE1Bf,OAAOgB,SAFmB,CAAAH,EAAAE,KAAA,gBAGtBP,EAAO,IAAIS,IAAKjB,OAAOgB,UAHDH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMpBf,OAAOgB,SAASE,SANI,OAQ1BpB,EAAQU,GARkBK,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAU1Bd,EAAMc,EAAAM,IAVoB,QAAAN,EAAAE,KAAA,iBAcrBf,OAAOQ,MAERA,EAAOR,OAAOQ,KACpBY,QAAQC,IAAI,2BACZvB,EAAQU,KAIFE,EAAW,IAAIO,IAAKK,UAAUC,aAClC,yBAEIf,EAAO,IAAIS,IAAKP,GACtBU,QAAQC,IAAI,gDACZvB,EAAQU,IA3BoB,yBAAAK,EAAAW,SAAAjB,EAAAkB,KAAA,yCCYrBC,MAbf,WACE,OACEC,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,OACbF,EAAAtB,EAAAuB,cAAA,KAAGE,KAAK,IAAID,UAAU,cAAtB,QAGAF,EAAAtB,EAAAuB,cAAA,KAAGE,KAAK,sCAAsCD,UAAU,aACtDF,EAAAtB,EAAAuB,cAAA,OAAKG,IAAKC,IAAQC,IAAI,SAASJ,UAAU,iBC+ElCK,sBAtFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAAuB,KAAAS,IACjBE,EAAAlC,OAAAoC,EAAA,EAAApC,CAAAuB,KAAAvB,OAAAqC,EAAA,EAAArC,CAAAgC,GAAAM,KAAAf,KAAMU,KACDM,MAAQ,CACXC,OAAQ,GACRC,KAAM,IAGRP,EAAKQ,mBAAqBR,EAAKQ,mBAAmBC,KAAxB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAkC,KAC1BA,EAAKW,iBAAmBX,EAAKW,iBAAiBF,KAAtB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAkC,KACxBA,EAAKY,aAAeZ,EAAKY,aAAaH,KAAlB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAkC,KATHA,kFAYAa,GACjBxB,KAAKyB,SAAS,CAACR,OAAQO,EAAEE,OAAOC,iDAGjBH,GACfxB,KAAKyB,SAAS,CAACP,KAAMM,EAAEE,OAAOC,6CAGnBH,GAAG,IAAAI,EAAA5B,KACdwB,EAAEK,iBAEF7B,KAAKU,MAAMoB,SAASC,QAAQC,QAC1BhC,KAAKgB,MAAME,KACXlB,KAAKU,MAAM3B,KAAKkD,MAAMC,MAAMlC,KAAKgB,MAAMC,SACvCkB,KACA,CAACC,KAAMpC,KAAKU,MAAM2B,QAClBV,MAAO3B,KAAKU,MAAM3B,KAAKkD,MAAMC,MAAMlC,KAAKgB,MAAMC,SAC9C,WACEW,EAAKlB,MAAM4B,WAAW,4BAExBC,GAAG,eAAgB,WACnBX,EAAKlB,MAAM4B,WAAW,0BACtBV,EAAKlB,MAAM8B,UACXC,WAAW,WACTb,EAAKlB,MAAMgC,gBACV,OACFH,GAAG,QAAS,WACbX,EAAKlB,MAAM4B,WAAW,uBACtBV,EAAKlB,MAAM8B,UACXC,WAAW,WACTb,EAAKlB,MAAMgC,gBACV,wCAKL,OACExC,EAAAtB,EAAAuB,cAAA,WAASC,UAAU,QACjBF,EAAAtB,EAAAuB,cAAA,MAAIC,UAAU,mBAAd,eACAF,EAAAtB,EAAAuB,cAAA,MAAIC,UAAU,gBAAd,QACAF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,oBAAb,iCAGAF,EAAAtB,EAAAuB,cAAA,QAAMwC,SAAU3C,KAAKuB,cACnBrB,EAAAtB,EAAAuB,cAAA,SACEyC,KAAK,OACLC,KAAK,SACLzC,UAAU,kCACV0C,YAAY,eACZnB,MAAO3B,KAAKgB,MAAMC,OAClB8B,SAAU/C,KAAKmB,qBAEjBjB,EAAAtB,EAAAuB,cAAA,SACEyC,KAAK,OACLC,KAAK,OACLzC,UAAU,gCACV0C,YAAY,iBACZnB,MAAO3B,KAAKgB,MAAME,KAClB6B,SAAU/C,KAAKsB,mBAEjBpB,EAAAtB,EAAAuB,cAAA,UAAQC,UAAU,gBAAlB,OAEFF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,oBAAb,2DAEEF,EAAAtB,EAAAuB,cAAA,WAFF,0DAIED,EAAAtB,EAAAuB,cAAA,WAJF,gBAKgBH,KAAKU,MAAM2B,QAL3B,aA3EWW,cCuGJC,qNArGbjC,MAAQ,CACNkC,KAAM,QAGRC,kBAAoB,WAClBxC,EAAKyC,SAAWC,YAAY,WAC1B1C,EAAK2C,WACJ,QA8CLC,iBAAmB,WACjB5C,EAAKD,MAAMoB,SAASC,QAAQyB,WAAWrB,KAAK,CAC1CC,KAAMzB,EAAKD,MAAM2B,SAChB,WACD1B,EAAKD,MAAM4B,WAAW,4BACrBC,GAAG,eAAgB,WACpB5B,EAAKD,MAAM4B,WAAW,0BACtB3B,EAAKD,MAAM8B,UACXC,WAAW,WACT9B,EAAKD,MAAMgC,gBACV,OACFH,GAAG,QAAS,WACb5B,EAAKD,MAAM4B,WAAW,uBACtB3B,EAAKD,MAAM8B,UACXC,WAAW,WACT9B,EAAKD,MAAMgC,gBACV,8FA1DLe,cAAczD,KAAKoD,4CAInB,KAAGpD,KAAKU,MAAMgD,KAAKC,SAAWC,KAAKC,MAAMC,KAAKC,MAAQ,MAGpD,OAAO/D,KAAKgE,WAAWhE,KAAKU,MAAMgD,KAAKC,SAAWC,KAAKC,MAAMC,KAAKC,MAAQ,MAF1E/D,KAAKyB,SAAS,CAACyB,KAAM,uCAMdhC,GACT,IAAMgC,EAAO,IAAIY,KAAY,IAAP5C,GAChB+C,EAAOf,EAAKgB,aAAe,EAC3BC,EAAQjB,EAAKkB,cACbC,EAAUnB,EAAKoB,gBACfC,EAAUrB,EAAKsB,aACrBxE,KAAKyB,SAAS,CACZyB,KAAM,CACJe,OACAE,QACAE,UACAE,kDAMJ,GAAsB,MAAnBvE,KAAKgB,MAAMkC,MAAoC,IAApBlD,KAAKgB,MAAMkC,KACvC,OACEhD,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,iBACbF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,gBAAb,cAGAF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,iBACXF,EAAAtB,EAAAuB,cAAA,YAAOH,KAAKgB,MAAMkC,KAAKe,MADzB,SAC2C/D,EAAAtB,EAAAuB,cAAA,YAAOH,KAAKgB,MAAMkC,KAAKiB,OADlE,UACsFjE,EAAAtB,EAAAuB,cAAA,YAAOH,KAAKgB,MAAMkC,KAAKmB,SAD7G,YACqInE,EAAAtB,EAAAuB,cAAA,YAAOH,KAAKgB,MAAMkC,KAAKqB,SAD5J,oDA6BN,GAAuB,IAApBvE,KAAKgB,MAAMkC,KACZ,OACEhD,EAAAtB,EAAAuB,cAAA,UAAQsE,QAASzE,KAAKuD,iBAAkBnD,UAAU,kBAAlD,6CAQJ,OACEF,EAAAtB,EAAAuB,cAAA,WAASC,UAAU,UACjBF,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,iBACbF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,gBAAb,eAGAF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,iBACXF,EAAAtB,EAAAuB,cAAA,YAAOH,KAAKU,MAAM3B,KAAKkD,MAAMyC,QAAQ1E,KAAKU,MAAMgD,KAAKzC,OAAQ,UAD/D,SAIDjB,KAAK2E,aACL3E,KAAK4E,uBAhGO5B,cCsBN6B,2LAfX,OAAyB,MAAtB7E,KAAKU,MAAMoE,QAEV5E,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,WACbF,EAAAtB,EAAAuB,cAAA,KAAGC,UAAU,iBACVJ,KAAKU,MAAMoE,UAMX,YAlBS9B,cC4HP+B,sBAnHb,SAAAA,EAAYrE,GAAO,IAAAC,EAAA,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAAuB,KAAA+E,IACjBpE,EAAAlC,OAAAoC,EAAA,EAAApC,CAAAuB,KAAAvB,OAAAqC,EAAA,EAAArC,CAAAsG,GAAAhE,KAAAf,KAAMU,KAcRyC,kBAfmB1E,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAeC,SAAAmG,IAAA,IAAAjG,EAAAkG,EAAA5C,EAAA6C,EAAAC,EAAAC,EAAA,OAAAzG,EAAAC,EAAAO,KAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,cAAA+F,EAAAhG,KAAA,EAAAgG,EAAA/F,KAAA,EAGGnB,IAHH,cAGVY,EAHUsG,EAAAC,KAAAD,EAAA/F,KAAA,EAMOP,EAAKwG,IAAIC,cANhB,cAMVP,EANUI,EAAAC,KAOVjD,EAAU4C,EAAS,GAPTI,EAAA/F,KAAA,GAUQP,EAAKwG,IAAIE,IAAIC,QAVrB,QAUVR,EAVUG,EAAAC,KAWVH,EAAkBQ,EAAaC,SAASV,GACxCE,EAAW,IAAIrG,EAAKwG,IAAIM,SAC5BF,EAAaG,IACbX,GAAmBA,EAAgBY,SAKrCpF,EAAKc,SAAS,CAAE1C,OAAMsD,UAASP,SAAUsD,IAnBzBC,EAAA/F,KAAA,iBAAA+F,EAAAhG,KAAA,GAAAgG,EAAA3F,GAAA2F,EAAA,SAsBhBW,MAAK,0EAGLrG,QAAQsG,MAARZ,EAAA3F,IAzBgB,QA4BlBiB,EAAK6B,UAEL7B,EAAKuF,gBAAkB7C,YAAW5E,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAmG,EAAA,OAAAtG,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACVqB,EAAKK,MAAMjC,KAAKwG,IAAIC,cADV,QAC3BP,EAD2B7F,EAAAkG,MAEpB,KAAO3E,EAAKK,MAAMqB,SAC7B1B,EAAKc,SAAS,CACZY,QAAS4C,EAAS,KAJW,wBAAA7F,EAAAW,SAAAjB,EAAAkB,SAOhC,KArCe,yBAAAqF,EAAAtF,SAAAiF,EAAAhF,KAAA,aAblBW,EAAKK,MAAQ,CACXjC,KAAM,KACNsD,QAAS,KACTP,SAAU,KACV4B,KAAM,KACNoB,QAAS,MAGXnE,EAAK6B,QAAU7B,EAAK6B,QAAQpB,KAAb3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAkC,KACfA,EAAK2B,WAAa3B,EAAK2B,WAAWlB,KAAhB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAkC,KAClBA,EAAK+B,aAAe/B,EAAK+B,aAAatB,KAAlB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAkC,KAZHA,sFAwDjB8C,cAAczD,KAAKkG,sLAIblG,KAAKgB,MAAMc,SAASC,QAAQS,QAAQxC,KAAKgB,MAAMqB,SAAStB,KAAK,SAACoF,EAAKzC,GACvE9B,EAAKH,SAAS,CAACiC,KAAM,CACnBC,SAAUD,EAAK,GACfzC,OAAQyC,EAAK,GACb0C,OAAQ1C,EAAK,6IAKR2C,GACTrG,KAAKyB,SAAS,CACZqD,QAASuB,2CAKXrG,KAAKyB,SAAS,CACZqD,QAAS,wCAKX,OAAK9E,KAAKgB,MAAMjC,KAGZiB,KAAKgB,MAAM0C,MAAQ1D,KAAKgB,MAAM0C,KAAK0C,OAEnClG,EAAAtB,EAAAuB,cAAA,WACED,EAAAtB,EAAAuB,cAACmG,EAAD,MACApG,EAAAtB,EAAAuB,cAACoG,EAAD9H,OAAA+H,OAAA,GACMxG,KAAKgB,MADX,CAEEwB,QAASxC,KAAKwC,QACdF,WAAYtC,KAAKsC,WACjBI,aAAc1C,KAAK0C,gBAErBxC,EAAAtB,EAAAuB,cAACsG,EAAD,CAAS3B,QAAS9E,KAAKgB,MAAM8D,WAK/B5E,EAAAtB,EAAAuB,cAAA,WACED,EAAAtB,EAAAuB,cAACmG,EAAD,MACApG,EAAAtB,EAAAuB,cAACuG,EAADjI,OAAA+H,OAAA,GACMxG,KAAKgB,MADX,CAEEwB,QAASxC,KAAKwC,QACdF,WAAYtC,KAAKsC,WACjBI,aAAc1C,KAAK0C,gBAErBxC,EAAAtB,EAAAuB,cAACsG,EAAD,CAAS3B,QAAS9E,KAAKgB,MAAM8D,WAzB1B5E,EAAAtB,EAAAuB,cAAA,6DApFK6C,cCCE2D,QACW,cAA7BpI,OAAOqI,SAASC,UAEe,UAA7BtI,OAAOqI,SAASC,UAEhBtI,OAAOqI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9G,EAAAtB,EAAAuB,cAAC8G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd51355b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.f83354a3.png\";","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React from 'react';\r\nimport github from '../images/github.png';\r\nimport '../layout/components/nav.sass';\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"nav\">\r\n      <a href=\"/\" className=\"nav__brand\">\r\n        HODL\r\n      </a>\r\n      <a href=\"https://github.com/KadenZipfel/hodl\" className=\"nav__icon\">\r\n        <img src={github} alt=\"Github\" className=\"nav__icon\" />\r\n      </a>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav;","import React, {Component} from 'react';\r\nimport '../layout/components/hero.sass';\r\n\r\nclass Hero extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      amount: '',\r\n      time: ''\r\n    }\r\n\r\n    this.handleAmountChange = this.handleAmountChange.bind(this);\r\n    this.handleTimeChange = this.handleTimeChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleAmountChange(e) {\r\n    this.setState({amount: e.target.value});\r\n  }\r\n\r\n  handleTimeChange(e) {\r\n    this.setState({time: e.target.value})\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    this.props.contract.methods.deposit(\r\n      this.state.time, \r\n      this.props.web3.utils.toWei(this.state.amount)\r\n    ).send(\r\n      {from: this.props.account,\r\n      value: this.props.web3.utils.toWei(this.state.amount)},\r\n      () => {\r\n        this.props.setMessage('Transaction Pending...');\r\n      }\r\n    ).on('confirmation', () => {\r\n      this.props.setMessage('Transaction Confirmed!');\r\n      this.props.getUser();\r\n      setTimeout(() => {\r\n        this.props.clearMessage();\r\n      }, 10000);\r\n    }).on('error', () => {\r\n      this.props.setMessage('Transaction Failed.');\r\n      this.props.getUser();\r\n      setTimeout(() => {\r\n        this.props.clearMessage();\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"hero\">\r\n        <h4 className=\"hero__subheader\">Weak hands?</h4>\r\n        <h1 className=\"hero__header\">HODL</h1>\r\n        <p className=\"hero__directions\">\r\n          Enter amount and lockup time.\r\n        </p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input \r\n            type=\"text\" \r\n            name=\"amount\"\r\n            className=\"hero__input hero__input--amount\"\r\n            placeholder=\"Amount (eth)\"\r\n            value={this.state.amount}\r\n            onChange={this.handleAmountChange}\r\n          />\r\n          <input \r\n            type=\"text\" \r\n            name=\"time\"\r\n            className=\"hero__input hero__input--time\"\r\n            placeholder=\"Time (seconds)\"\r\n            value={this.state.time}\r\n            onChange={this.handleTimeChange}\r\n          />\r\n          <button className=\"hero__button\">Go</button>\r\n        </form>\r\n        <p className=\"hero__disclaimer\">\r\n          The value sent with this transaction will be locked in a\r\n          <br />\r\n          smart contract for as long as specified and can only be \r\n          <br />\r\n          withdrawn by {this.props.account}.\r\n        </p>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hero;","import React, {Component} from 'react';\r\n\r\nimport '../layout/components/hodler.sass';\r\n\r\nclass Hodler extends Component {\r\n  state = {\r\n    date: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.interval = setInterval(() => {\r\n      this.getTime();\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  getTime() {\r\n    if(this.props.user.earliest < Math.floor(Date.now() / 1000)) {\r\n      this.setState({date: 0});\r\n    } else {\r\n      return this.formatTime(this.props.user.earliest - Math.floor(Date.now() / 1000));\r\n    }\r\n  }\r\n\r\n  formatTime(time) {\r\n    const date = new Date(time * 1000);\r\n    const days = date.getUTCDate() - 1;\r\n    const hours = date.getUTCHours();\r\n    const minutes = date.getUTCMinutes();\r\n    const seconds = date.getSeconds();\r\n    this.setState({\r\n      date: {\r\n        days, \r\n        hours,\r\n        minutes,\r\n        seconds\r\n      }\r\n    });\r\n  }\r\n\r\n  renderTime() {\r\n    if(this.state.date != null && this.state.date !== 0) {\r\n      return(\r\n        <div className=\"hodler__group\">\r\n          <p className=\"hodler__name\">\r\n            Time left:\r\n          </p>\r\n          <p className=\"hodler__value\">\r\n            <span>{this.state.date.days}</span> days <span>{this.state.date.hours}</span> hours <span>{this.state.date.minutes}</span> minutes <span>{this.state.date.seconds}</span> seconds\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  handleWithdrawal = () => {\r\n    this.props.contract.methods.withdraw().send({\r\n      from: this.props.account\r\n    }, () => {\r\n      this.props.setMessage('Transaction Pending...');\r\n    }).on('confirmation', () => {\r\n      this.props.setMessage('Transaction Confirmed!');\r\n      this.props.getUser();\r\n      setTimeout(() => {\r\n        this.props.clearMessage();\r\n      }, 10000);\r\n    }).on('error', () => {\r\n      this.props.setMessage('Transaction Failed.');\r\n      this.props.getUser();\r\n      setTimeout(() => {\r\n        this.props.clearMessage();\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  renderButton() {\r\n    if(this.state.date === 0) {\r\n      return(\r\n        <button onClick={this.handleWithdrawal} className=\"hodler__button\">\r\n          Withdraw\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <section className=\"hodler\">\r\n        <div className=\"hodler__group\">\r\n          <p className=\"hodler__name\">\r\n            Eth locked:\r\n          </p>\r\n          <p className=\"hodler__value\">\r\n            <span>{this.props.web3.utils.fromWei(this.props.user.amount, 'ether')}</span> eth\r\n          </p>\r\n        </div>\r\n        {this.renderTime()}\r\n        {this.renderButton()}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Hodler;","import React, {Component} from 'react';\r\nimport '../layout/components/message.sass';\r\n\r\nclass Message extends Component {\r\n  // componentDidUpdate(prevProps) {\r\n  //   if(this.props.message !== prevProps.message) {\r\n  //     this.render();\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    if(this.props.message != null) {\r\n      return(\r\n        <div className=\"message\">\r\n          <p className=\"message__text\">\r\n            {this.props.message}\r\n          </p>\r\n          {/* Loader here */}\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Message;","import React, { Component } from \"react\";\r\nimport HodlContract from \"./contracts/Hodl.json\";\r\nimport getWeb3 from \"./utils/getWeb3\";\r\n\r\nimport Nav from './components/Nav';\r\nimport Hero from './components/Hero';\r\nimport Hodler from './components/Hodler';\r\nimport Message from './components/Message';\r\n\r\nimport './layout/config/_base.sass';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      web3: null, \r\n      account: null, \r\n      contract: null, \r\n      user: null,\r\n      message: null\r\n    };\r\n\r\n    this.getUser = this.getUser.bind(this);\r\n    this.setMessage = this.setMessage.bind(this);\r\n    this.clearMessage = this.clearMessage.bind(this);\r\n  }\r\n \r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      const account = accounts[0];\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = HodlContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        HodlContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      // Set web3, account, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, account, contract: instance });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n\r\n    this.getUser();\r\n\r\n    this.accountInterval = setInterval(async () => {\r\n      const accounts = await this.state.web3.eth.getAccounts();\r\n      if (accounts[0] !== this.state.account) {\r\n        this.setState({\r\n          account: accounts[0]\r\n        });\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.accountInterval);\r\n  }\r\n\r\n  async getUser() {\r\n    await this.state.contract.methods.getUser(this.state.account).call((err, user) => {\r\n      this.setState({user: {\r\n        earliest: user[0],\r\n        amount: user[1],\r\n        hodler: user[2]\r\n      }});\r\n    });\r\n  }\r\n\r\n  setMessage(newMessage) {\r\n    this.setState({\r\n      message: newMessage\r\n    });\r\n  }\r\n\r\n  clearMessage() {\r\n    this.setState({\r\n      message: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    if (this.state.user && this.state.user.hodler) {\r\n      return (\r\n        <div>\r\n          <Nav />\r\n          <Hodler \r\n            {...this.state} \r\n            getUser={this.getUser} \r\n            setMessage={this.setMessage}\r\n            clearMessage={this.clearMessage}\r\n          />\r\n          <Message message={this.state.message} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Nav />\r\n          <Hero \r\n            {...this.state} \r\n            getUser={this.getUser}\r\n            setMessage={this.setMessage}\r\n            clearMessage={this.clearMessage}\r\n          />\r\n          <Message message={this.state.message} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './layout/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}